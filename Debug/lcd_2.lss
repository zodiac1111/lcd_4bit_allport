
lcd_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b08  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000b08  00000b7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000033f0  00000000  00000000  00000b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001451  00000000  00000000  00003f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000021  00000000  00000000  000053d1  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e0       	ldi	r30, 0x08	; 8
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	2a d2       	rcall	.+1108   	; 0x49e <main>
  4a:	5c c5       	rjmp	.+2744   	; 0xb04 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <en_toggle>:

}
///产生一个使能脉冲
void en_toggle(void)
{
	En_H;     //拉高使能位
  4e:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  50:	85 e0       	ldi	r24, 0x05	; 5
  52:	8a 95       	dec	r24
  54:	f1 f7       	brne	.-4      	; 0x52 <en_toggle+0x4>
  56:	00 00       	nop
	DelaytE;     //保持高电平一定时间
	En_L;     //拉低使能位,产生一个下降沿
  58:	a8 98       	cbi	0x15, 0	; 21
  5a:	85 e0       	ldi	r24, 0x05	; 5
  5c:	8a 95       	dec	r24
  5e:	f1 f7       	brne	.-4      	; 0x5c <en_toggle+0xe>
  60:	00 00       	nop
  62:	08 95       	ret

00000064 <wait_until_ready>:
	//LCDDDR = 0x0F;
//	DB4_PORT &= ~_BV(DB4);
//	DB5_PORT &= ~_BV(DB5);
//	DB6_PORT &= ~_BV(DB6);
//	DB7_PORT &= ~_BV(DB7);
	SET_DB_IN()
  64:	8c 98       	cbi	0x11, 4	; 17
  66:	8d 98       	cbi	0x11, 5	; 17
  68:	8e 98       	cbi	0x11, 6	; 17
  6a:	8f 98       	cbi	0x11, 7	; 17
	;
	//命令选择
	RW_R;     //读状态
  6c:	a9 9a       	sbi	0x15, 1	; 21
	RS_ADDR;     //地址(状态)所读为状态位
  6e:	aa 98       	cbi	0x15, 2	; 21
  70:	85 e0       	ldi	r24, 0x05	; 5
  72:	8a 95       	dec	r24
  74:	f1 f7       	brne	.-4      	; 0x72 <wait_until_ready+0xe>
  76:	00 00       	nop
	//命令选择完毕
	DelaytE;
	En_H;     //触发
  78:	a8 9a       	sbi	0x15, 0	; 21
  7a:	85 e0       	ldi	r24, 0x05	; 5
  7c:	8a 95       	dec	r24
  7e:	f1 f7       	brne	.-4      	; 0x7c <wait_until_ready+0x18>
  80:	00 00       	nop
	DelaytE;     // 这是忙标志被映射到数据DB7 位
	loop_until_bit_is_clear(DB7_IN, DB7);
  82:	87 99       	sbic	0x10, 7	; 16
  84:	fe cf       	rjmp	.-4      	; 0x82 <wait_until_ready+0x1e>
	En_L;
  86:	a8 98       	cbi	0x15, 0	; 21
  88:	08 95       	ret

0000008a <set_command>:
 * 写命令
 * @param[in] Command 命令
 * @param[in] busyFlag 是否检查繁忙
 */
void set_command(uint8_t data, uint8_t busyFlag)
{
  8a:	cf 93       	push	r28
  8c:	c8 2f       	mov	r28, r24
	uint8_t busy;
	busy = busyFlag;
	//busy=1 表示系统希望检测忙信号
	if (busy==1)
  8e:	61 30       	cpi	r22, 0x01	; 1
  90:	09 f4       	brne	.+2      	; 0x94 <set_command+0xa>
		//等待指令执行完毕
		wait_until_ready();
  92:	e8 df       	rcall	.-48     	; 0x64 <wait_until_ready>
	//完毕,可以写了
	SET_DB_OUT()
  94:	8c 9a       	sbi	0x11, 4	; 17
  96:	8d 9a       	sbi	0x11, 5	; 17
  98:	8e 9a       	sbi	0x11, 6	; 17
  9a:	8f 9a       	sbi	0x11, 7	; 17
	;
	RW_W;     //置为写状态 =写 0
  9c:	a9 98       	cbi	0x15, 1	; 21
	RS_L;     //写入的是命令字 =指令
  9e:	aa 98       	cbi	0x15, 2	; 21
	En_H;
  a0:	a8 9a       	sbi	0x15, 0	; 21
	(data&0b00010000) ? (DB4_DAT |= _BV(DB4)) : (DB4_DAT &= ~_BV(DB4));     //第4位
  a2:	c4 ff       	sbrs	r28, 4
  a4:	02 c0       	rjmp	.+4      	; 0xaa <set_command+0x20>
  a6:	94 9a       	sbi	0x12, 4	; 18
  a8:	01 c0       	rjmp	.+2      	; 0xac <set_command+0x22>
  aa:	94 98       	cbi	0x12, 4	; 18
	(data&0b00100000) ? (DB5_DAT |= _BV(DB5)) : (DB5_DAT &= ~_BV(DB5));     //第5位
  ac:	c5 ff       	sbrs	r28, 5
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <set_command+0x2a>
  b0:	95 9a       	sbi	0x12, 5	; 18
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <set_command+0x2c>
  b4:	95 98       	cbi	0x12, 5	; 18
	(data&0b01000000) ? (DB6_DAT |= _BV(DB6)) : (DB6_DAT &= ~_BV(DB6));     //第6位
  b6:	c6 ff       	sbrs	r28, 6
  b8:	02 c0       	rjmp	.+4      	; 0xbe <set_command+0x34>
  ba:	96 9a       	sbi	0x12, 6	; 18
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <set_command+0x36>
  be:	96 98       	cbi	0x12, 6	; 18
	(data&0b10000000) ? (DB7_DAT |= _BV(DB7)) : (DB7_DAT &= ~_BV(DB7));     //第7位
  c0:	c7 ff       	sbrs	r28, 7
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <set_command+0x3e>
  c4:	97 9a       	sbi	0x12, 7	; 18
  c6:	01 c0       	rjmp	.+2      	; 0xca <set_command+0x40>
  c8:	97 98       	cbi	0x12, 7	; 18
  ca:	82 e4       	ldi	r24, 0x42	; 66
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <set_command+0x42>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <set_command+0x48>
	_delay_us(25);
	en_toggle();     //产生使能脉冲,使之在下降沿开始执行指令
  d2:	bd df       	rcall	.-134    	; 0x4e <en_toggle>
	(data&0b00000001) ? (DB4_DAT |= _BV(DB4)) : (DB4_DAT &= ~_BV(DB4));     //第0位
  d4:	c0 ff       	sbrs	r28, 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <set_command+0x52>
  d8:	94 9a       	sbi	0x12, 4	; 18
  da:	01 c0       	rjmp	.+2      	; 0xde <set_command+0x54>
  dc:	94 98       	cbi	0x12, 4	; 18
	(data&0b00000010) ? (DB5_DAT |= _BV(DB5)) : (DB5_DAT &= ~_BV(DB5));     //第1位
  de:	c1 ff       	sbrs	r28, 1
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <set_command+0x5c>
  e2:	95 9a       	sbi	0x12, 5	; 18
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <set_command+0x5e>
  e6:	95 98       	cbi	0x12, 5	; 18
	(data&0b00000100) ? (DB6_DAT |= _BV(DB6)) : (DB6_DAT &= ~_BV(DB6));     //第2位
  e8:	c2 ff       	sbrs	r28, 2
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <set_command+0x66>
  ec:	96 9a       	sbi	0x12, 6	; 18
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <set_command+0x68>
  f0:	96 98       	cbi	0x12, 6	; 18
	(data&0b00001000) ? (DB7_DAT |= _BV(DB7)) : (DB7_DAT &= ~_BV(DB7));     //第3位
  f2:	c3 ff       	sbrs	r28, 3
  f4:	02 c0       	rjmp	.+4      	; 0xfa <set_command+0x70>
  f6:	97 9a       	sbi	0x12, 7	; 18
  f8:	01 c0       	rjmp	.+2      	; 0xfc <set_command+0x72>
  fa:	97 98       	cbi	0x12, 7	; 18
  fc:	82 e4       	ldi	r24, 0x42	; 66
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <set_command+0x74>
 102:	00 c0       	rjmp	.+0      	; 0x104 <set_command+0x7a>
	_delay_us(25);
	en_toggle();     //产生使能脉冲,使之在下降沿开始执行指令
}
 104:	cf 91       	pop	r28
	(data&0b00000001) ? (DB4_DAT |= _BV(DB4)) : (DB4_DAT &= ~_BV(DB4));     //第0位
	(data&0b00000010) ? (DB5_DAT |= _BV(DB5)) : (DB5_DAT &= ~_BV(DB5));     //第1位
	(data&0b00000100) ? (DB6_DAT |= _BV(DB6)) : (DB6_DAT &= ~_BV(DB6));     //第2位
	(data&0b00001000) ? (DB7_DAT |= _BV(DB7)) : (DB7_DAT &= ~_BV(DB7));     //第3位
	_delay_us(25);
	en_toggle();     //产生使能脉冲,使之在下降沿开始执行指令
 106:	a3 cf       	rjmp	.-186    	; 0x4e <en_toggle>

00000108 <init_lcd>:
 */
void init_lcd(void)
{

	//3个控制端口为输出
	CRTL_OUT()
 108:	a0 9a       	sbi	0x14, 0	; 20
 10a:	a1 9a       	sbi	0x14, 1	; 20
 10c:	a2 9a       	sbi	0x14, 2	; 20
	//4条数据总线:输出
	SET_DB_OUT()
 10e:	8c 9a       	sbi	0x11, 4	; 17
 110:	8d 9a       	sbi	0x11, 5	; 17
 112:	8e 9a       	sbi	0x11, 6	; 17
 114:	8f 9a       	sbi	0x11, 7	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f e2       	ldi	r24, 0x2F	; 47
 118:	95 e7       	ldi	r25, 0x75	; 117
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <init_lcd+0x12>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <init_lcd+0x18>
 120:	00 00       	nop
	//设置功能: [0] [0]  [1] [1]DL-8位  X X X X
	uint8_t fun_8bit_2line = 0b00110000;//低四位无关
	//设置功能: [0] [0]  [1] [0]DL-4位 [1]N-双行 [0]F-5*7字形 X X
	uint8_t fun_4bit_2line = 0b00101000;
	_delay_ms(15);     //2
	set_command(fun_8bit_2line, 0);     //3设为 8 位接口模式,busy=0 不检测忙信号
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	80 e3       	ldi	r24, 0x30	; 48
 126:	b1 df       	rcall	.-158    	; 0x8a <set_command>
 128:	87 e0       	ldi	r24, 0x07	; 7
 12a:	90 e2       	ldi	r25, 0x20	; 32
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <init_lcd+0x24>
 130:	00 c0       	rjmp	.+0      	; 0x132 <init_lcd+0x2a>
 132:	00 00       	nop
	_delay_ms(4.1);     //4
	set_command(fun_8bit_2line, 0);	//5
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	80 e3       	ldi	r24, 0x30	; 48
 138:	a8 df       	rcall	.-176    	; 0x8a <set_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	87 ec       	ldi	r24, 0xC7	; 199
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <init_lcd+0x36>
 142:	00 c0       	rjmp	.+0      	; 0x144 <init_lcd+0x3c>
 144:	00 00       	nop
	_delay_us(100);     //6
	set_command(fun_8bit_2line, 0);	//7
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	9f df       	rcall	.-194    	; 0x8a <set_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	87 e0       	ldi	r24, 0x07	; 7
 14e:	90 e2       	ldi	r25, 0x20	; 32
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <init_lcd+0x48>
 154:	00 c0       	rjmp	.+0      	; 0x156 <init_lcd+0x4e>
 156:	00 00       	nop
	//DL:数据接口宽度标志:DL=1,8 位数据总线 DB7~DB0;DL=0,4 位数据总线 DB7~DB4,DB3~DB0
	//不用,使用此方式传送数据,需分两次进行;
	//N:显示行数标志;
	//F:显示字符点阵字体标志;
	//功能设置
	set_command(fun_4bit_2line, 0);	//9
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	88 e2       	ldi	r24, 0x28	; 40
 15c:	96 df       	rcall	.-212    	; 0x8a <set_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	9a e6       	ldi	r25, 0x6A	; 106
 160:	9a 95       	dec	r25
 162:	f1 f7       	brne	.-4      	; 0x160 <init_lcd+0x58>
 164:	00 c0       	rjmp	.+0      	; 0x166 <init_lcd+0x5e>
	_delay_us(40);     //10
	set_command(fun_4bit_2line, 1);	//11
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	88 e2       	ldi	r24, 0x28	; 40
 16a:	8f df       	rcall	.-226    	; 0x8a <set_command>
 16c:	8a e6       	ldi	r24, 0x6A	; 106
 16e:	8a 95       	dec	r24
 170:	f1 f7       	brne	.-4      	; 0x16e <init_lcd+0x66>
 172:	00 c0       	rjmp	.+0      	; 0x174 <init_lcd+0x6c>
	_delay_us(40);     //12
	//开关显示
	set_command(0b00001000, 1);     //13.显示关闭(0) 关光标(0) 关光标闪烁(0)
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	88 e0       	ldi	r24, 0x08	; 8
 178:	88 df       	rcall	.-240    	; 0x8a <set_command>
 17a:	9a e6       	ldi	r25, 0x6A	; 106
 17c:	9a 95       	dec	r25
 17e:	f1 f7       	brne	.-4      	; 0x17c <init_lcd+0x74>
 180:	00 c0       	rjmp	.+0      	; 0x182 <init_lcd+0x7a>
	_delay_us(40);     //14
	//开关显示
	set_command(0b00001111, 1);     //15.显示开启(1) 显示光标(1) 光标闪烁(1)
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	8f e0       	ldi	r24, 0x0F	; 15
 186:	81 df       	rcall	.-254    	; 0x8a <set_command>
 188:	8a e6       	ldi	r24, 0x6A	; 106
 18a:	8a 95       	dec	r24
 18c:	f1 f7       	brne	.-4      	; 0x18a <init_lcd+0x82>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <init_lcd+0x88>
	_delay_us(40);     //16
	//设置输入方式
	set_command(0b00000110, 1);     //17.写入新数据后光标右移(1) 文字不动(0)
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	7a df       	rcall	.-268    	; 0x8a <set_command>
 196:	9a e6       	ldi	r25, 0x6A	; 106
 198:	9a 95       	dec	r25
 19a:	f1 f7       	brne	.-4      	; 0x198 <init_lcd+0x90>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <init_lcd+0x96>
	_delay_us(40);     //18
	//19 初始化完成
	//清屏 可选的
	set_command(0b00000001, 1);     //显示清屏(1)
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	73 df       	rcall	.-282    	; 0x8a <set_command>
 1a4:	8a e6       	ldi	r24, 0x6A	; 106
 1a6:	8a 95       	dec	r24
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <init_lcd+0x9e>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <init_lcd+0xa4>
 1ac:	08 95       	ret

000001ae <set_data>:
/**
 * 写数据
 * @param data
 */
void set_data(uint8_t data)
{
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
	wait_until_ready();     //等待指令执行完毕
 1b2:	58 df       	rcall	.-336    	; 0x64 <wait_until_ready>
	//LCDDDR = 0xff;     //数据总线位输出
	SET_DB_OUT()
 1b4:	8c 9a       	sbi	0x11, 4	; 17
 1b6:	8d 9a       	sbi	0x11, 5	; 17
 1b8:	8e 9a       	sbi	0x11, 6	; 17
 1ba:	8f 9a       	sbi	0x11, 7	; 17
	;
	RW_W;     //置为写状态
 1bc:	a9 98       	cbi	0x15, 1	; 21
	RS_H;     //写入的是数据
 1be:	aa 9a       	sbi	0x15, 2	; 21
	En_H;
 1c0:	a8 9a       	sbi	0x15, 0	; 21
	(data&0b00010000) ? (DB4_DAT |= _BV(DB4)) : (DB4_DAT &= ~_BV(DB4));     //第4位
 1c2:	c4 ff       	sbrs	r28, 4
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <set_data+0x1c>
 1c6:	94 9a       	sbi	0x12, 4	; 18
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <set_data+0x1e>
 1ca:	94 98       	cbi	0x12, 4	; 18
	(data&0b00100000) ? (DB5_DAT |= _BV(DB5)) : (DB5_DAT &= ~_BV(DB5));     //第5位
 1cc:	c5 ff       	sbrs	r28, 5
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <set_data+0x26>
 1d0:	95 9a       	sbi	0x12, 5	; 18
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <set_data+0x28>
 1d4:	95 98       	cbi	0x12, 5	; 18
	(data&0b01000000) ? (DB6_DAT |= _BV(DB6)) : (DB6_DAT &= ~_BV(DB6));     //第6位
 1d6:	c6 ff       	sbrs	r28, 6
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <set_data+0x30>
 1da:	96 9a       	sbi	0x12, 6	; 18
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <set_data+0x32>
 1de:	96 98       	cbi	0x12, 6	; 18
	(data&0b10000000) ? (DB7_DAT |= _BV(DB7)) : (DB7_DAT &= ~_BV(DB7));     //第7位
 1e0:	c7 ff       	sbrs	r28, 7
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <set_data+0x3a>
 1e4:	97 9a       	sbi	0x12, 7	; 18
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <set_data+0x3c>
 1e8:	97 98       	cbi	0x12, 7	; 18
	//_delay_us(25);
	en_toggle();     //产生使能脉冲,使之在下降沿开始执行指令
 1ea:	31 df       	rcall	.-414    	; 0x4e <en_toggle>
	(data&0b00000001) ? (DB4_DAT |= _BV(DB4)) : (DB4_DAT &= ~_BV(DB4));     //第0位
 1ec:	c0 ff       	sbrs	r28, 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <set_data+0x46>
 1f0:	94 9a       	sbi	0x12, 4	; 18
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <set_data+0x48>
 1f4:	94 98       	cbi	0x12, 4	; 18
	(data&0b00000010) ? (DB5_DAT |= _BV(DB5)) : (DB5_DAT &= ~_BV(DB5));     //第1位
 1f6:	c1 ff       	sbrs	r28, 1
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <set_data+0x50>
 1fa:	95 9a       	sbi	0x12, 5	; 18
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <set_data+0x52>
 1fe:	95 98       	cbi	0x12, 5	; 18
	(data&0b00000100) ? (DB6_DAT |= _BV(DB6)) : (DB6_DAT &= ~_BV(DB6));     //第2位
 200:	c2 ff       	sbrs	r28, 2
 202:	02 c0       	rjmp	.+4      	; 0x208 <set_data+0x5a>
 204:	96 9a       	sbi	0x12, 6	; 18
 206:	01 c0       	rjmp	.+2      	; 0x20a <set_data+0x5c>
 208:	96 98       	cbi	0x12, 6	; 18
	(data&0b00001000) ? (DB7_DAT |= _BV(DB7)) : (DB7_DAT &= ~_BV(DB7));     //第3位
 20a:	c3 ff       	sbrs	r28, 3
 20c:	02 c0       	rjmp	.+4      	; 0x212 <set_data+0x64>
 20e:	97 9a       	sbi	0x12, 7	; 18
 210:	01 c0       	rjmp	.+2      	; 0x214 <set_data+0x66>
 212:	97 98       	cbi	0x12, 7	; 18
	//_delay_us(25);
	en_toggle();     //产生使能脉冲,使之在下降沿开始执行指令
}
 214:	cf 91       	pop	r28
	(data&0b00000001) ? (DB4_DAT |= _BV(DB4)) : (DB4_DAT &= ~_BV(DB4));     //第0位
	(data&0b00000010) ? (DB5_DAT |= _BV(DB5)) : (DB5_DAT &= ~_BV(DB5));     //第1位
	(data&0b00000100) ? (DB6_DAT |= _BV(DB6)) : (DB6_DAT &= ~_BV(DB6));     //第2位
	(data&0b00001000) ? (DB7_DAT |= _BV(DB7)) : (DB7_DAT &= ~_BV(DB7));     //第3位
	//_delay_us(25);
	en_toggle();     //产生使能脉冲,使之在下降沿开始执行指令
 216:	1b cf       	rjmp	.-458    	; 0x4e <en_toggle>

00000218 <get_data>:
 * @return
 */
uint8_t get_data(void)
{
	uint8_t data = 0;
	wait_until_ready();     //等待指令执行完毕
 218:	25 df       	rcall	.-438    	; 0x64 <wait_until_ready>
	//LCDDDR = 0x00;     //数据总线位输入
	SET_DB_IN()
 21a:	8c 98       	cbi	0x11, 4	; 17
 21c:	8d 98       	cbi	0x11, 5	; 17
 21e:	8e 98       	cbi	0x11, 6	; 17
 220:	8f 98       	cbi	0x11, 7	; 17
	;
	RW_R;     //读 Hi
 222:	a9 9a       	sbi	0x15, 1	; 21
	RS_DAT;     //数据 Hi
 224:	aa 9a       	sbi	0x15, 2	; 21
	En_L;
 226:	a8 98       	cbi	0x15, 0	; 21
 228:	85 e0       	ldi	r24, 0x05	; 5
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <get_data+0x12>
 22e:	00 00       	nop
	DelaytE;
	En_H;     //触发
 230:	a8 9a       	sbi	0x15, 0	; 21
 232:	95 e0       	ldi	r25, 0x05	; 5
 234:	9a 95       	dec	r25
 236:	f1 f7       	brne	.-4      	; 0x234 <get_data+0x1c>
 238:	00 00       	nop
	DelaytE;
	//data = PIND;
	//先传高四位
	(DB4_IN &_BV(DB4)) ? (data |= _BV(4)) : (data &= ~_BV(4));
 23a:	84 9b       	sbis	0x10, 4	; 16
 23c:	02 c0       	rjmp	.+4      	; 0x242 <get_data+0x2a>
 23e:	80 e1       	ldi	r24, 0x10	; 16
 240:	01 c0       	rjmp	.+2      	; 0x244 <get_data+0x2c>
 242:	80 e0       	ldi	r24, 0x00	; 0
	(DB5_IN &_BV(DB5)) ? (data |= _BV(5)) : (data &= ~_BV(5));
 244:	85 99       	sbic	0x10, 5	; 16
 246:	80 62       	ori	r24, 0x20	; 32
	(DB6_IN &_BV(DB6)) ? (data |= _BV(6)) : (data &= ~_BV(6));
 248:	86 99       	sbic	0x10, 6	; 16
 24a:	80 64       	ori	r24, 0x40	; 64
	(DB7_IN &_BV(DB7)) ? (data |= _BV(7)) : (data &= ~_BV(7));
 24c:	87 9b       	sbis	0x10, 7	; 16
 24e:	02 c0       	rjmp	.+4      	; 0x254 <get_data+0x3c>
 250:	80 68       	ori	r24, 0x80	; 128
 252:	01 c0       	rjmp	.+2      	; 0x256 <get_data+0x3e>
 254:	8f 77       	andi	r24, 0x7F	; 127
	En_L;
 256:	a8 98       	cbi	0x15, 0	; 21
 258:	95 e0       	ldi	r25, 0x05	; 5
 25a:	9a 95       	dec	r25
 25c:	f1 f7       	brne	.-4      	; 0x25a <get_data+0x42>
 25e:	00 00       	nop
	DelaytE;
	En_H;     //触发
 260:	a8 9a       	sbi	0x15, 0	; 21
 262:	95 e0       	ldi	r25, 0x05	; 5
 264:	9a 95       	dec	r25
 266:	f1 f7       	brne	.-4      	; 0x264 <get_data+0x4c>
 268:	00 00       	nop
	DelaytE;     // 这是忙标志被映射到数据DB7 位
	(DB4_IN &_BV(DB4)) ? (data |= _BV(0)) : (data &= ~_BV(0));
 26a:	84 9b       	sbis	0x10, 4	; 16
 26c:	02 c0       	rjmp	.+4      	; 0x272 <get_data+0x5a>
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	01 c0       	rjmp	.+2      	; 0x274 <get_data+0x5c>
 272:	8e 7f       	andi	r24, 0xFE	; 254
	(DB5_IN &_BV(DB5)) ? (data |= _BV(1)) : (data &= ~_BV(1));
 274:	85 9b       	sbis	0x10, 5	; 16
 276:	02 c0       	rjmp	.+4      	; 0x27c <get_data+0x64>
 278:	82 60       	ori	r24, 0x02	; 2
 27a:	01 c0       	rjmp	.+2      	; 0x27e <get_data+0x66>
 27c:	8d 7f       	andi	r24, 0xFD	; 253
	(DB6_IN &_BV(DB6)) ? (data |= _BV(2)) : (data &= ~_BV(2));
 27e:	86 9b       	sbis	0x10, 6	; 16
 280:	02 c0       	rjmp	.+4      	; 0x286 <get_data+0x6e>
 282:	84 60       	ori	r24, 0x04	; 4
 284:	01 c0       	rjmp	.+2      	; 0x288 <get_data+0x70>
 286:	8b 7f       	andi	r24, 0xFB	; 251
	(DB7_IN &_BV(DB7)) ? (data |= _BV(3)) : (data &= ~_BV(3));
 288:	87 9b       	sbis	0x10, 7	; 16
 28a:	02 c0       	rjmp	.+4      	; 0x290 <get_data+0x78>
 28c:	88 60       	ori	r24, 0x08	; 8
 28e:	08 95       	ret
 290:	87 7f       	andi	r24, 0xF7	; 247
	//En_L;
	return data;
}
 292:	08 95       	ret

00000294 <get_pos>:
 * @return
 */
uint8_t get_pos(void)
{
	uint8_t data = 0;
	wait_until_ready();     //等待指令执行完毕
 294:	e7 de       	rcall	.-562    	; 0x64 <wait_until_ready>
	//LCDDDR = 0x00;     //数据总线位输入
	SET_DB_IN()
 296:	8c 98       	cbi	0x11, 4	; 17
 298:	8d 98       	cbi	0x11, 5	; 17
 29a:	8e 98       	cbi	0x11, 6	; 17
 29c:	8f 98       	cbi	0x11, 7	; 17
	;
	RW_R;     //读 HI
 29e:	a9 9a       	sbi	0x15, 1	; 21
	RS_ADDR;  //地址 0
 2a0:	aa 98       	cbi	0x15, 2	; 21
 2a2:	85 e0       	ldi	r24, 0x05	; 5
 2a4:	8a 95       	dec	r24
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <get_pos+0x10>
 2a8:	00 00       	nop
	DelaytE;
	En_H;     //触发
 2aa:	a8 9a       	sbi	0x15, 0	; 21
 2ac:	95 e0       	ldi	r25, 0x05	; 5
 2ae:	9a 95       	dec	r25
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <get_pos+0x1a>
 2b2:	00 00       	nop
	DelaytE;
	//先传位置低4位
	(DB4_IN &_BV(DB4)) ? (data |= _BV(0)) : (data &= ~_BV(0));
 2b4:	80 b3       	in	r24, 0x10	; 16
 2b6:	82 95       	swap	r24
 2b8:	81 70       	andi	r24, 0x01	; 1
	(DB5_IN &_BV(DB5)) ? (data |= _BV(1)) : (data &= ~_BV(1));
 2ba:	85 99       	sbic	0x10, 5	; 16
 2bc:	82 60       	ori	r24, 0x02	; 2
	(DB6_IN &_BV(DB6)) ? (data |= _BV(2)) : (data &= ~_BV(2));
 2be:	86 99       	sbic	0x10, 6	; 16
 2c0:	84 60       	ori	r24, 0x04	; 4
	(DB7_IN &_BV(DB7)) ? (data |= _BV(3)) : (data &= ~_BV(3));
 2c2:	87 99       	sbic	0x10, 7	; 16
 2c4:	88 60       	ori	r24, 0x08	; 8
	En_L;
 2c6:	a8 98       	cbi	0x15, 0	; 21
 2c8:	95 e0       	ldi	r25, 0x05	; 5
 2ca:	9a 95       	dec	r25
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <get_pos+0x36>
 2ce:	00 00       	nop
	DelaytE;
	En_H;     //触发
 2d0:	a8 9a       	sbi	0x15, 0	; 21
 2d2:	95 e0       	ldi	r25, 0x05	; 5
 2d4:	9a 95       	dec	r25
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <get_pos+0x40>
 2d8:	00 00       	nop
	DelaytE;
	//在传高4位
	(DB4_IN &_BV(DB4)) ? (data |= _BV(4)) : (data &= ~_BV(4));
 2da:	84 99       	sbic	0x10, 4	; 16
 2dc:	80 61       	ori	r24, 0x10	; 16
	(DB5_IN &_BV(DB5)) ? (data |= _BV(5)) : (data &= ~_BV(5));
 2de:	85 99       	sbic	0x10, 5	; 16
 2e0:	80 62       	ori	r24, 0x20	; 32
	(DB6_IN &_BV(DB6)) ? (data |= _BV(6)) : (data &= ~_BV(6));
 2e2:	86 99       	sbic	0x10, 6	; 16
 2e4:	80 64       	ori	r24, 0x40	; 64
	(DB7_IN &_BV(DB7)) ? (data |= _BV(7)) : (data &= ~_BV(7));
 2e6:	87 9b       	sbis	0x10, 7	; 16
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <get_pos+0x5a>
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	08 95       	ret
 2ee:	8f 77       	andi	r24, 0x7F	; 127
	return data;
}
 2f0:	08 95       	ret

000002f2 <get_pos2>:
 * @return
 */
uint8_t get_pos2(void)
{
	uint8_t data = 0;
	wait_until_ready();     //等待指令执行完毕
 2f2:	b8 de       	rcall	.-656    	; 0x64 <wait_until_ready>
	//LCDDDR = 0x00;     //数据总线位输入
	SET_DB_IN()
 2f4:	8c 98       	cbi	0x11, 4	; 17
 2f6:	8d 98       	cbi	0x11, 5	; 17
 2f8:	8e 98       	cbi	0x11, 6	; 17
 2fa:	8f 98       	cbi	0x11, 7	; 17
	;
	RW_R;     //读 HI
 2fc:	a9 9a       	sbi	0x15, 1	; 21
	RS_DAT;  //地址 0
 2fe:	aa 9a       	sbi	0x15, 2	; 21
 300:	85 e0       	ldi	r24, 0x05	; 5
 302:	8a 95       	dec	r24
 304:	f1 f7       	brne	.-4      	; 0x302 <get_pos2+0x10>
 306:	00 00       	nop
	DelaytE;
	En_H;     //触发
 308:	a8 9a       	sbi	0x15, 0	; 21
 30a:	95 e0       	ldi	r25, 0x05	; 5
 30c:	9a 95       	dec	r25
 30e:	f1 f7       	brne	.-4      	; 0x30c <get_pos2+0x1a>
 310:	00 00       	nop
	DelaytE;
	//先传位置低4位
	(DB4_IN &_BV(DB4)) ? (data |= _BV(0)) : (data &= ~_BV(0));
 312:	80 b3       	in	r24, 0x10	; 16
 314:	82 95       	swap	r24
 316:	81 70       	andi	r24, 0x01	; 1
	(DB5_IN &_BV(DB5)) ? (data |= _BV(1)) : (data &= ~_BV(1));
 318:	85 99       	sbic	0x10, 5	; 16
 31a:	82 60       	ori	r24, 0x02	; 2
	(DB6_IN &_BV(DB6)) ? (data |= _BV(2)) : (data &= ~_BV(2));
 31c:	86 99       	sbic	0x10, 6	; 16
 31e:	84 60       	ori	r24, 0x04	; 4
	(DB7_IN &_BV(DB7)) ? (data |= _BV(3)) : (data &= ~_BV(3));
 320:	87 99       	sbic	0x10, 7	; 16
 322:	88 60       	ori	r24, 0x08	; 8
	En_L;
 324:	a8 98       	cbi	0x15, 0	; 21
 326:	95 e0       	ldi	r25, 0x05	; 5
 328:	9a 95       	dec	r25
 32a:	f1 f7       	brne	.-4      	; 0x328 <get_pos2+0x36>
 32c:	00 00       	nop
	DelaytE;
	En_H;     //触发
 32e:	a8 9a       	sbi	0x15, 0	; 21
 330:	95 e0       	ldi	r25, 0x05	; 5
 332:	9a 95       	dec	r25
 334:	f1 f7       	brne	.-4      	; 0x332 <get_pos2+0x40>
 336:	00 00       	nop
	DelaytE;
	//在传高4位
	(DB4_IN &_BV(DB4)) ? (data |= _BV(4)) : (data &= ~_BV(4));
 338:	84 99       	sbic	0x10, 4	; 16
 33a:	80 61       	ori	r24, 0x10	; 16
	(DB5_IN &_BV(DB5)) ? (data |= _BV(5)) : (data &= ~_BV(5));
 33c:	85 99       	sbic	0x10, 5	; 16
 33e:	80 62       	ori	r24, 0x20	; 32
	(DB6_IN &_BV(DB6)) ? (data |= _BV(6)) : (data &= ~_BV(6));
 340:	86 99       	sbic	0x10, 6	; 16
 342:	80 64       	ori	r24, 0x40	; 64
	(DB7_IN &_BV(DB7)) ? (data |= _BV(7)) : (data &= ~_BV(7));
 344:	87 9b       	sbis	0x10, 7	; 16
 346:	02 c0       	rjmp	.+4      	; 0x34c <get_pos2+0x5a>
 348:	80 68       	ori	r24, 0x80	; 128
 34a:	08 95       	ret
 34c:	8f 77       	andi	r24, 0x7F	; 127
	return data;
}
 34e:	08 95       	ret

00000350 <write_str>:
/**
 * 写字符串 就是把自己循环一下而已
 * @param str
 */
void write_str(char * str)
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	ec 01       	movw	r28, r24
	while (*str!='\0') {
 356:	01 c0       	rjmp	.+2      	; 0x35a <write_str+0xa>
		set_data(*str++);
 358:	2a df       	rcall	.-428    	; 0x1ae <set_data>
 * 写字符串 就是把自己循环一下而已
 * @param str
 */
void write_str(char * str)
{
	while (*str!='\0') {
 35a:	89 91       	ld	r24, Y+
 35c:	81 11       	cpse	r24, r1
 35e:	fc cf       	rjmp	.-8      	; 0x358 <write_str+0x8>
		set_data(*str++);
	}
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <set_pos>:
 * 1行: 0x00 0x01 ... 0x0f
 * 2行: 0x40 0x41 ... 0x4f
 */
void set_pos(uint8_t offset)
{
	set_command(offset|0b10000000, 1);
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	80 68       	ori	r24, 0x80	; 128
 36a:	8f ce       	rjmp	.-738    	; 0x8a <set_command>

0000036c <return_home>:
/**
 * 光标复位到1行1列处.
 */
void return_home(void)
{
	set_command(0b00000010, 1);     //显示开启(1) 显示光标(1) 光标闪烁(1)
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	8c ce       	rjmp	.-744    	; 0x8a <set_command>

00000372 <set_cgram_addr>:
 * * 3-6位:表示第几个字符,最多定义8个自定义字符.
 * @param data
 */
void set_cgram_addr(uint8_t addr)
{
	set_command(0b01000000|(addr&0b00111111), 1);
 372:	8f 73       	andi	r24, 0x3F	; 63
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	80 64       	ori	r24, 0x40	; 64
 378:	88 ce       	rjmp	.-752    	; 0x8a <set_command>

0000037a <set_cgram_data>:
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 37a:	8f 71       	andi	r24, 0x1F	; 31
 37c:	18 cf       	rjmp	.-464    	; 0x1ae <set_data>

0000037e <init_chardb>:
 * 初始化自定义字符表 最多8个 地址从0b00,000,000 到 0b00,111,000
 * http://www.quinapalus.com/hd44780udg.html
 */
void init_chardb(void)
{
	set_cgram_addr(0b00000000);     //000,000
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	f8 df       	rcall	.-16     	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	14 df       	rcall	.-472    	; 0x1ae <set_data>
 386:	8a e0       	ldi	r24, 0x0A	; 10
 388:	12 df       	rcall	.-476    	; 0x1ae <set_data>
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	10 df       	rcall	.-480    	; 0x1ae <set_data>
 38e:	84 e0       	ldi	r24, 0x04	; 4
 390:	0e df       	rcall	.-484    	; 0x1ae <set_data>
 392:	81 e1       	ldi	r24, 0x11	; 17
 394:	0c df       	rcall	.-488    	; 0x1ae <set_data>
 396:	8e e0       	ldi	r24, 0x0E	; 14
 398:	0a df       	rcall	.-492    	; 0x1ae <set_data>
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	08 df       	rcall	.-496    	; 0x1ae <set_data>
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	06 df       	rcall	.-500    	; 0x1ae <set_data>
	set_cgram_data(0b00000100);
	set_cgram_data(0b00010001);
	set_cgram_data(0b00001110);
	set_cgram_data(0b00000000);
	set_cgram_data(0b00000000);	//最下面一行光标行,最好不要使用,效果不好
	set_cgram_addr(0b00001000);   //001,000
 3a2:	88 e0       	ldi	r24, 0x08	; 8
 3a4:	e6 df       	rcall	.-52     	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	02 df       	rcall	.-508    	; 0x1ae <set_data>
 3aa:	8d e1       	ldi	r24, 0x1D	; 29
 3ac:	00 df       	rcall	.-512    	; 0x1ae <set_data>
 3ae:	85 e0       	ldi	r24, 0x05	; 5
 3b0:	fe de       	rcall	.-516    	; 0x1ae <set_data>
 3b2:	8f e1       	ldi	r24, 0x1F	; 31
 3b4:	fc de       	rcall	.-520    	; 0x1ae <set_data>
 3b6:	84 e1       	ldi	r24, 0x14	; 20
 3b8:	fa de       	rcall	.-524    	; 0x1ae <set_data>
 3ba:	87 e1       	ldi	r24, 0x17	; 23
 3bc:	f8 de       	rcall	.-528    	; 0x1ae <set_data>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	f6 de       	rcall	.-532    	; 0x1ae <set_data>
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	f4 de       	rcall	.-536    	; 0x1ae <set_data>
	set_cgram_data(0b00011111);
	set_cgram_data(0b00010100);
	set_cgram_data(0b00010111);
	set_cgram_data(0b00000000);
	set_cgram_data(0b00000000);
	set_cgram_addr(0b00010000);     //010,000
 3c6:	80 e1       	ldi	r24, 0x10	; 16
 3c8:	d4 df       	rcall	.-88     	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 3ca:	84 e0       	ldi	r24, 0x04	; 4
 3cc:	f0 de       	rcall	.-544    	; 0x1ae <set_data>
 3ce:	84 e0       	ldi	r24, 0x04	; 4
 3d0:	ee de       	rcall	.-548    	; 0x1ae <set_data>
 3d2:	8f e1       	ldi	r24, 0x1F	; 31
 3d4:	ec de       	rcall	.-552    	; 0x1ae <set_data>
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	ea de       	rcall	.-556    	; 0x1ae <set_data>
 3da:	8e e0       	ldi	r24, 0x0E	; 14
 3dc:	e8 de       	rcall	.-560    	; 0x1ae <set_data>
 3de:	8e e0       	ldi	r24, 0x0E	; 14
 3e0:	e6 de       	rcall	.-564    	; 0x1ae <set_data>
 3e2:	84 e0       	ldi	r24, 0x04	; 4
 3e4:	e4 de       	rcall	.-568    	; 0x1ae <set_data>
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	e2 de       	rcall	.-572    	; 0x1ae <set_data>
	set_cgram_data(0b00000100);
	set_cgram_data(0b00001110);
	set_cgram_data(0b00001110);
	set_cgram_data(0b00000100);
	set_cgram_data(0b00000000);
	set_cgram_addr(0b00011000);     //011,000
 3ea:	88 e1       	ldi	r24, 0x18	; 24
 3ec:	c2 df       	rcall	.-124    	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	de de       	rcall	.-580    	; 0x1ae <set_data>
 3f2:	81 e1       	ldi	r24, 0x11	; 17
 3f4:	dc de       	rcall	.-584    	; 0x1ae <set_data>
 3f6:	8a e0       	ldi	r24, 0x0A	; 10
 3f8:	da de       	rcall	.-588    	; 0x1ae <set_data>
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	d8 de       	rcall	.-592    	; 0x1ae <set_data>
 3fe:	8f e1       	ldi	r24, 0x1F	; 31
 400:	d6 de       	rcall	.-596    	; 0x1ae <set_data>
 402:	81 e1       	ldi	r24, 0x11	; 17
 404:	d4 de       	rcall	.-600    	; 0x1ae <set_data>
 406:	8e e0       	ldi	r24, 0x0E	; 14
 408:	d2 de       	rcall	.-604    	; 0x1ae <set_data>
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	d0 de       	rcall	.-608    	; 0x1ae <set_data>
	set_cgram_data(0b00000000);
	set_cgram_data(0b00011111);
	set_cgram_data(0b00010001);
	set_cgram_data(0b00001110);
	set_cgram_data(0b00000000);
	set_cgram_addr(0b00100000);     //100,000
 40e:	80 e2       	ldi	r24, 0x20	; 32
 410:	b0 df       	rcall	.-160    	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 412:	84 e0       	ldi	r24, 0x04	; 4
 414:	cc de       	rcall	.-616    	; 0x1ae <set_data>
 416:	8e e0       	ldi	r24, 0x0E	; 14
 418:	ca de       	rcall	.-620    	; 0x1ae <set_data>
 41a:	85 e1       	ldi	r24, 0x15	; 21
 41c:	c8 de       	rcall	.-624    	; 0x1ae <set_data>
 41e:	84 e0       	ldi	r24, 0x04	; 4
 420:	c6 de       	rcall	.-628    	; 0x1ae <set_data>
 422:	84 e0       	ldi	r24, 0x04	; 4
 424:	c4 de       	rcall	.-632    	; 0x1ae <set_data>
 426:	84 e0       	ldi	r24, 0x04	; 4
 428:	c2 de       	rcall	.-636    	; 0x1ae <set_data>
 42a:	84 e0       	ldi	r24, 0x04	; 4
 42c:	c0 de       	rcall	.-640    	; 0x1ae <set_data>
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	be de       	rcall	.-644    	; 0x1ae <set_data>
	set_cgram_data(0b00000100);
	set_cgram_data(0b00000100);
	set_cgram_data(0b00000100);
	set_cgram_data(0b00000100);
	set_cgram_data(0b00000000);
	set_cgram_addr(0b00101000);     //101,000
 432:	88 e2       	ldi	r24, 0x28	; 40
 434:	9e df       	rcall	.-196    	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 436:	84 e0       	ldi	r24, 0x04	; 4
 438:	ba de       	rcall	.-652    	; 0x1ae <set_data>
 43a:	84 e0       	ldi	r24, 0x04	; 4
 43c:	b8 de       	rcall	.-656    	; 0x1ae <set_data>
 43e:	84 e0       	ldi	r24, 0x04	; 4
 440:	b6 de       	rcall	.-660    	; 0x1ae <set_data>
 442:	84 e0       	ldi	r24, 0x04	; 4
 444:	b4 de       	rcall	.-664    	; 0x1ae <set_data>
 446:	85 e1       	ldi	r24, 0x15	; 21
 448:	b2 de       	rcall	.-668    	; 0x1ae <set_data>
 44a:	8e e0       	ldi	r24, 0x0E	; 14
 44c:	b0 de       	rcall	.-672    	; 0x1ae <set_data>
 44e:	84 e0       	ldi	r24, 0x04	; 4
 450:	ae de       	rcall	.-676    	; 0x1ae <set_data>
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	ac de       	rcall	.-680    	; 0x1ae <set_data>
	set_cgram_data(0b00000100);
	set_cgram_data(0b00010101);
	set_cgram_data(0b00001110);
	set_cgram_data(0b00000100);
	set_cgram_data(0b00000000);
	set_cgram_addr(0b00110000);     //110,000
 456:	80 e3       	ldi	r24, 0x30	; 48
 458:	8c df       	rcall	.-232    	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 45a:	84 e0       	ldi	r24, 0x04	; 4
 45c:	a8 de       	rcall	.-688    	; 0x1ae <set_data>
 45e:	8f e1       	ldi	r24, 0x1F	; 31
 460:	a6 de       	rcall	.-692    	; 0x1ae <set_data>
 462:	84 e0       	ldi	r24, 0x04	; 4
 464:	a4 de       	rcall	.-696    	; 0x1ae <set_data>
 466:	8f e1       	ldi	r24, 0x1F	; 31
 468:	a2 de       	rcall	.-700    	; 0x1ae <set_data>
 46a:	81 e1       	ldi	r24, 0x11	; 17
 46c:	a0 de       	rcall	.-704    	; 0x1ae <set_data>
 46e:	81 e1       	ldi	r24, 0x11	; 17
 470:	9e de       	rcall	.-708    	; 0x1ae <set_data>
 472:	8f e1       	ldi	r24, 0x1F	; 31
 474:	9c de       	rcall	.-712    	; 0x1ae <set_data>
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	9a de       	rcall	.-716    	; 0x1ae <set_data>
	set_cgram_data(0b00011111);
	set_cgram_data(0b00010001);
	set_cgram_data(0b00010001);
	set_cgram_data(0b00011111);
	set_cgram_data(0b00000000);
	set_cgram_addr(0b00111000);     //111,000
 47a:	88 e3       	ldi	r24, 0x38	; 56
 47c:	7a df       	rcall	.-268    	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	96 de       	rcall	.-724    	; 0x1ae <set_data>
 482:	8a e0       	ldi	r24, 0x0A	; 10
 484:	94 de       	rcall	.-728    	; 0x1ae <set_data>
 486:	85 e1       	ldi	r24, 0x15	; 21
 488:	92 de       	rcall	.-732    	; 0x1ae <set_data>
 48a:	8a e0       	ldi	r24, 0x0A	; 10
 48c:	90 de       	rcall	.-736    	; 0x1ae <set_data>
 48e:	84 e0       	ldi	r24, 0x04	; 4
 490:	8e de       	rcall	.-740    	; 0x1ae <set_data>
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	8c de       	rcall	.-744    	; 0x1ae <set_data>
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	8a de       	rcall	.-748    	; 0x1ae <set_data>
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	88 ce       	rjmp	.-752    	; 0x1ae <set_data>

0000049e <main>:
 49e:	0f 93       	push	r16
 4a0:	1f 93       	push	r17
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	00 d0       	rcall	.+0      	; 0x4a8 <main+0xa>
 4a8:	00 d0       	rcall	.+0      	; 0x4aa <main+0xc>
 4aa:	1f 92       	push	r1
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
 4b0:	2b de       	rcall	.-938    	; 0x108 <init_lcd>
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	58 df       	rcall	.-336    	; 0x366 <set_pos>
 4b6:	80 e6       	ldi	r24, 0x60	; 96
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	4a df       	rcall	.-364    	; 0x350 <write_str>
 4bc:	2f ef       	ldi	r18, 0xFF	; 255
 4be:	80 e7       	ldi	r24, 0x70	; 112
 4c0:	92 e0       	ldi	r25, 0x02	; 2
 4c2:	21 50       	subi	r18, 0x01	; 1
 4c4:	80 40       	sbci	r24, 0x00	; 0
 4c6:	90 40       	sbci	r25, 0x00	; 0
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <main+0x24>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <main+0x2e>
 4cc:	00 00       	nop
 4ce:	2f ef       	ldi	r18, 0xFF	; 255
 4d0:	80 e7       	ldi	r24, 0x70	; 112
 4d2:	92 e0       	ldi	r25, 0x02	; 2
 4d4:	21 50       	subi	r18, 0x01	; 1
 4d6:	80 40       	sbci	r24, 0x00	; 0
 4d8:	90 40       	sbci	r25, 0x00	; 0
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <main+0x36>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <main+0x40>
 4de:	00 00       	nop
 4e0:	86 e0       	ldi	r24, 0x06	; 6
 4e2:	41 df       	rcall	.-382    	; 0x366 <set_pos>
 4e4:	2f ef       	ldi	r18, 0xFF	; 255
 4e6:	89 e6       	ldi	r24, 0x69	; 105
 4e8:	98 e1       	ldi	r25, 0x18	; 24
 4ea:	21 50       	subi	r18, 0x01	; 1
 4ec:	80 40       	sbci	r24, 0x00	; 0
 4ee:	90 40       	sbci	r25, 0x00	; 0
 4f0:	e1 f7       	brne	.-8      	; 0x4ea <main+0x4c>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <main+0x56>
 4f4:	00 00       	nop
 4f6:	90 de       	rcall	.-736    	; 0x218 <get_data>
 4f8:	18 2f       	mov	r17, r24
 4fa:	8d e0       	ldi	r24, 0x0D	; 13
 4fc:	34 df       	rcall	.-408    	; 0x366 <set_pos>
 4fe:	81 2f       	mov	r24, r17
 500:	56 de       	rcall	.-852    	; 0x1ae <set_data>
 502:	2f ef       	ldi	r18, 0xFF	; 255
 504:	89 e6       	ldi	r24, 0x69	; 105
 506:	98 e1       	ldi	r25, 0x18	; 24
 508:	21 50       	subi	r18, 0x01	; 1
 50a:	80 40       	sbci	r24, 0x00	; 0
 50c:	90 40       	sbci	r25, 0x00	; 0
 50e:	e1 f7       	brne	.-8      	; 0x508 <main+0x6a>
 510:	00 c0       	rjmp	.+0      	; 0x512 <main+0x74>
 512:	00 00       	nop
 514:	34 df       	rcall	.-408    	; 0x37e <init_chardb>
 516:	80 e4       	ldi	r24, 0x40	; 64
 518:	26 df       	rcall	.-436    	; 0x366 <set_pos>
 51a:	10 e0       	ldi	r17, 0x00	; 0
 51c:	81 2f       	mov	r24, r17
 51e:	47 de       	rcall	.-882    	; 0x1ae <set_data>
 520:	1f 5f       	subi	r17, 0xFF	; 255
 522:	18 30       	cpi	r17, 0x08	; 8
 524:	d9 f7       	brne	.-10     	; 0x51c <main+0x7e>
 526:	2f ef       	ldi	r18, 0xFF	; 255
 528:	89 e6       	ldi	r24, 0x69	; 105
 52a:	98 e1       	ldi	r25, 0x18	; 24
 52c:	21 50       	subi	r18, 0x01	; 1
 52e:	80 40       	sbci	r24, 0x00	; 0
 530:	90 40       	sbci	r25, 0x00	; 0
 532:	e1 f7       	brne	.-8      	; 0x52c <main+0x8e>
 534:	00 c0       	rjmp	.+0      	; 0x536 <main+0x98>
 536:	00 00       	nop
 538:	8a e4       	ldi	r24, 0x4A	; 74
 53a:	15 df       	rcall	.-470    	; 0x366 <set_pos>
 53c:	ab de       	rcall	.-682    	; 0x294 <get_pos>
 53e:	1f 92       	push	r1
 540:	8f 93       	push	r24
 542:	8c e6       	ldi	r24, 0x6C	; 108
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	9f 93       	push	r25
 548:	8f 93       	push	r24
 54a:	8e 01       	movw	r16, r28
 54c:	0f 5f       	subi	r16, 0xFF	; 255
 54e:	1f 4f       	sbci	r17, 0xFF	; 255
 550:	1f 93       	push	r17
 552:	0f 93       	push	r16
 554:	14 d0       	rcall	.+40     	; 0x57e <sprintf>
 556:	c8 01       	movw	r24, r16
 558:	fb de       	rcall	.-522    	; 0x350 <write_str>
 55a:	0f 90       	pop	r0
 55c:	0f 90       	pop	r0
 55e:	0f 90       	pop	r0
 560:	0f 90       	pop	r0
 562:	0f 90       	pop	r0
 564:	0f 90       	pop	r0
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	0f 90       	pop	r0
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	08 95       	ret

0000057e <sprintf>:
 57e:	ae e0       	ldi	r26, 0x0E	; 14
 580:	b0 e0       	ldi	r27, 0x00	; 0
 582:	e4 ec       	ldi	r30, 0xC4	; 196
 584:	f2 e0       	ldi	r31, 0x02	; 2
 586:	95 c2       	rjmp	.+1322   	; 0xab2 <__prologue_saves__+0x1c>
 588:	0d 89       	ldd	r16, Y+21	; 0x15
 58a:	1e 89       	ldd	r17, Y+22	; 0x16
 58c:	86 e0       	ldi	r24, 0x06	; 6
 58e:	8c 83       	std	Y+4, r24	; 0x04
 590:	1a 83       	std	Y+2, r17	; 0x02
 592:	09 83       	std	Y+1, r16	; 0x01
 594:	8f ef       	ldi	r24, 0xFF	; 255
 596:	9f e7       	ldi	r25, 0x7F	; 127
 598:	9e 83       	std	Y+6, r25	; 0x06
 59a:	8d 83       	std	Y+5, r24	; 0x05
 59c:	ce 01       	movw	r24, r28
 59e:	49 96       	adiw	r24, 0x19	; 25
 5a0:	ac 01       	movw	r20, r24
 5a2:	6f 89       	ldd	r22, Y+23	; 0x17
 5a4:	78 8d       	ldd	r23, Y+24	; 0x18
 5a6:	ce 01       	movw	r24, r28
 5a8:	01 96       	adiw	r24, 0x01	; 1
 5aa:	08 d0       	rcall	.+16     	; 0x5bc <vfprintf>
 5ac:	ef 81       	ldd	r30, Y+7	; 0x07
 5ae:	f8 85       	ldd	r31, Y+8	; 0x08
 5b0:	e0 0f       	add	r30, r16
 5b2:	f1 1f       	adc	r31, r17
 5b4:	10 82       	st	Z, r1
 5b6:	2e 96       	adiw	r28, 0x0e	; 14
 5b8:	e4 e0       	ldi	r30, 0x04	; 4
 5ba:	97 c2       	rjmp	.+1326   	; 0xaea <__epilogue_restores__+0x1c>

000005bc <vfprintf>:
 5bc:	ac e0       	ldi	r26, 0x0C	; 12
 5be:	b0 e0       	ldi	r27, 0x00	; 0
 5c0:	e3 ee       	ldi	r30, 0xE3	; 227
 5c2:	f2 e0       	ldi	r31, 0x02	; 2
 5c4:	68 c2       	rjmp	.+1232   	; 0xa96 <__prologue_saves__>
 5c6:	7c 01       	movw	r14, r24
 5c8:	6b 01       	movw	r12, r22
 5ca:	8a 01       	movw	r16, r20
 5cc:	fc 01       	movw	r30, r24
 5ce:	17 82       	std	Z+7, r1	; 0x07
 5d0:	16 82       	std	Z+6, r1	; 0x06
 5d2:	83 81       	ldd	r24, Z+3	; 0x03
 5d4:	81 ff       	sbrs	r24, 1
 5d6:	b9 c1       	rjmp	.+882    	; 0x94a <vfprintf+0x38e>
 5d8:	88 24       	eor	r8, r8
 5da:	83 94       	inc	r8
 5dc:	91 2c       	mov	r9, r1
 5de:	8c 0e       	add	r8, r28
 5e0:	9d 1e       	adc	r9, r29
 5e2:	f7 01       	movw	r30, r14
 5e4:	93 81       	ldd	r25, Z+3	; 0x03
 5e6:	f6 01       	movw	r30, r12
 5e8:	93 fd       	sbrc	r25, 3
 5ea:	85 91       	lpm	r24, Z+
 5ec:	93 ff       	sbrs	r25, 3
 5ee:	81 91       	ld	r24, Z+
 5f0:	6f 01       	movw	r12, r30
 5f2:	88 23       	and	r24, r24
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <vfprintf+0x3c>
 5f6:	a5 c1       	rjmp	.+842    	; 0x942 <vfprintf+0x386>
 5f8:	85 32       	cpi	r24, 0x25	; 37
 5fa:	39 f4       	brne	.+14     	; 0x60a <vfprintf+0x4e>
 5fc:	93 fd       	sbrc	r25, 3
 5fe:	85 91       	lpm	r24, Z+
 600:	93 ff       	sbrs	r25, 3
 602:	81 91       	ld	r24, Z+
 604:	6f 01       	movw	r12, r30
 606:	85 32       	cpi	r24, 0x25	; 37
 608:	21 f4       	brne	.+8      	; 0x612 <vfprintf+0x56>
 60a:	b7 01       	movw	r22, r14
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	b9 d1       	rcall	.+882    	; 0x982 <fputc>
 610:	e8 cf       	rjmp	.-48     	; 0x5e2 <vfprintf+0x26>
 612:	51 2c       	mov	r5, r1
 614:	31 2c       	mov	r3, r1
 616:	20 e0       	ldi	r18, 0x00	; 0
 618:	20 32       	cpi	r18, 0x20	; 32
 61a:	a8 f4       	brcc	.+42     	; 0x646 <vfprintf+0x8a>
 61c:	8b 32       	cpi	r24, 0x2B	; 43
 61e:	61 f0       	breq	.+24     	; 0x638 <vfprintf+0x7c>
 620:	28 f4       	brcc	.+10     	; 0x62c <vfprintf+0x70>
 622:	80 32       	cpi	r24, 0x20	; 32
 624:	51 f0       	breq	.+20     	; 0x63a <vfprintf+0x7e>
 626:	83 32       	cpi	r24, 0x23	; 35
 628:	71 f4       	brne	.+28     	; 0x646 <vfprintf+0x8a>
 62a:	0b c0       	rjmp	.+22     	; 0x642 <vfprintf+0x86>
 62c:	8d 32       	cpi	r24, 0x2D	; 45
 62e:	39 f0       	breq	.+14     	; 0x63e <vfprintf+0x82>
 630:	80 33       	cpi	r24, 0x30	; 48
 632:	49 f4       	brne	.+18     	; 0x646 <vfprintf+0x8a>
 634:	21 60       	ori	r18, 0x01	; 1
 636:	28 c0       	rjmp	.+80     	; 0x688 <vfprintf+0xcc>
 638:	22 60       	ori	r18, 0x02	; 2
 63a:	24 60       	ori	r18, 0x04	; 4
 63c:	25 c0       	rjmp	.+74     	; 0x688 <vfprintf+0xcc>
 63e:	28 60       	ori	r18, 0x08	; 8
 640:	23 c0       	rjmp	.+70     	; 0x688 <vfprintf+0xcc>
 642:	20 61       	ori	r18, 0x10	; 16
 644:	21 c0       	rjmp	.+66     	; 0x688 <vfprintf+0xcc>
 646:	27 fd       	sbrc	r18, 7
 648:	27 c0       	rjmp	.+78     	; 0x698 <vfprintf+0xdc>
 64a:	38 2f       	mov	r19, r24
 64c:	30 53       	subi	r19, 0x30	; 48
 64e:	3a 30       	cpi	r19, 0x0A	; 10
 650:	78 f4       	brcc	.+30     	; 0x670 <vfprintf+0xb4>
 652:	26 ff       	sbrs	r18, 6
 654:	06 c0       	rjmp	.+12     	; 0x662 <vfprintf+0xa6>
 656:	fa e0       	ldi	r31, 0x0A	; 10
 658:	5f 9e       	mul	r5, r31
 65a:	30 0d       	add	r19, r0
 65c:	11 24       	eor	r1, r1
 65e:	53 2e       	mov	r5, r19
 660:	13 c0       	rjmp	.+38     	; 0x688 <vfprintf+0xcc>
 662:	8a e0       	ldi	r24, 0x0A	; 10
 664:	38 9e       	mul	r3, r24
 666:	30 0d       	add	r19, r0
 668:	11 24       	eor	r1, r1
 66a:	33 2e       	mov	r3, r19
 66c:	20 62       	ori	r18, 0x20	; 32
 66e:	0c c0       	rjmp	.+24     	; 0x688 <vfprintf+0xcc>
 670:	8e 32       	cpi	r24, 0x2E	; 46
 672:	21 f4       	brne	.+8      	; 0x67c <vfprintf+0xc0>
 674:	26 fd       	sbrc	r18, 6
 676:	65 c1       	rjmp	.+714    	; 0x942 <vfprintf+0x386>
 678:	20 64       	ori	r18, 0x40	; 64
 67a:	06 c0       	rjmp	.+12     	; 0x688 <vfprintf+0xcc>
 67c:	8c 36       	cpi	r24, 0x6C	; 108
 67e:	11 f4       	brne	.+4      	; 0x684 <vfprintf+0xc8>
 680:	20 68       	ori	r18, 0x80	; 128
 682:	02 c0       	rjmp	.+4      	; 0x688 <vfprintf+0xcc>
 684:	88 36       	cpi	r24, 0x68	; 104
 686:	41 f4       	brne	.+16     	; 0x698 <vfprintf+0xdc>
 688:	f6 01       	movw	r30, r12
 68a:	93 fd       	sbrc	r25, 3
 68c:	85 91       	lpm	r24, Z+
 68e:	93 ff       	sbrs	r25, 3
 690:	81 91       	ld	r24, Z+
 692:	6f 01       	movw	r12, r30
 694:	81 11       	cpse	r24, r1
 696:	c0 cf       	rjmp	.-128    	; 0x618 <vfprintf+0x5c>
 698:	98 2f       	mov	r25, r24
 69a:	95 54       	subi	r25, 0x45	; 69
 69c:	93 30       	cpi	r25, 0x03	; 3
 69e:	18 f0       	brcs	.+6      	; 0x6a6 <vfprintf+0xea>
 6a0:	90 52       	subi	r25, 0x20	; 32
 6a2:	93 30       	cpi	r25, 0x03	; 3
 6a4:	28 f4       	brcc	.+10     	; 0x6b0 <vfprintf+0xf4>
 6a6:	0c 5f       	subi	r16, 0xFC	; 252
 6a8:	1f 4f       	sbci	r17, 0xFF	; 255
 6aa:	ff e3       	ldi	r31, 0x3F	; 63
 6ac:	f9 83       	std	Y+1, r31	; 0x01
 6ae:	0d c0       	rjmp	.+26     	; 0x6ca <vfprintf+0x10e>
 6b0:	83 36       	cpi	r24, 0x63	; 99
 6b2:	31 f0       	breq	.+12     	; 0x6c0 <vfprintf+0x104>
 6b4:	83 37       	cpi	r24, 0x73	; 115
 6b6:	71 f0       	breq	.+28     	; 0x6d4 <vfprintf+0x118>
 6b8:	83 35       	cpi	r24, 0x53	; 83
 6ba:	09 f0       	breq	.+2      	; 0x6be <vfprintf+0x102>
 6bc:	5a c0       	rjmp	.+180    	; 0x772 <vfprintf+0x1b6>
 6be:	22 c0       	rjmp	.+68     	; 0x704 <vfprintf+0x148>
 6c0:	f8 01       	movw	r30, r16
 6c2:	80 81       	ld	r24, Z
 6c4:	89 83       	std	Y+1, r24	; 0x01
 6c6:	0e 5f       	subi	r16, 0xFE	; 254
 6c8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ca:	44 24       	eor	r4, r4
 6cc:	43 94       	inc	r4
 6ce:	51 2c       	mov	r5, r1
 6d0:	54 01       	movw	r10, r8
 6d2:	14 c0       	rjmp	.+40     	; 0x6fc <vfprintf+0x140>
 6d4:	38 01       	movw	r6, r16
 6d6:	f2 e0       	ldi	r31, 0x02	; 2
 6d8:	6f 0e       	add	r6, r31
 6da:	71 1c       	adc	r7, r1
 6dc:	f8 01       	movw	r30, r16
 6de:	a0 80       	ld	r10, Z
 6e0:	b1 80       	ldd	r11, Z+1	; 0x01
 6e2:	26 ff       	sbrs	r18, 6
 6e4:	03 c0       	rjmp	.+6      	; 0x6ec <vfprintf+0x130>
 6e6:	65 2d       	mov	r22, r5
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <vfprintf+0x134>
 6ec:	6f ef       	ldi	r22, 0xFF	; 255
 6ee:	7f ef       	ldi	r23, 0xFF	; 255
 6f0:	c5 01       	movw	r24, r10
 6f2:	2c 87       	std	Y+12, r18	; 0x0c
 6f4:	3b d1       	rcall	.+630    	; 0x96c <strnlen>
 6f6:	2c 01       	movw	r4, r24
 6f8:	83 01       	movw	r16, r6
 6fa:	2c 85       	ldd	r18, Y+12	; 0x0c
 6fc:	6f e7       	ldi	r22, 0x7F	; 127
 6fe:	26 2e       	mov	r2, r22
 700:	22 22       	and	r2, r18
 702:	17 c0       	rjmp	.+46     	; 0x732 <vfprintf+0x176>
 704:	38 01       	movw	r6, r16
 706:	f2 e0       	ldi	r31, 0x02	; 2
 708:	6f 0e       	add	r6, r31
 70a:	71 1c       	adc	r7, r1
 70c:	f8 01       	movw	r30, r16
 70e:	a0 80       	ld	r10, Z
 710:	b1 80       	ldd	r11, Z+1	; 0x01
 712:	26 ff       	sbrs	r18, 6
 714:	03 c0       	rjmp	.+6      	; 0x71c <vfprintf+0x160>
 716:	65 2d       	mov	r22, r5
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <vfprintf+0x164>
 71c:	6f ef       	ldi	r22, 0xFF	; 255
 71e:	7f ef       	ldi	r23, 0xFF	; 255
 720:	c5 01       	movw	r24, r10
 722:	2c 87       	std	Y+12, r18	; 0x0c
 724:	18 d1       	rcall	.+560    	; 0x956 <strnlen_P>
 726:	2c 01       	movw	r4, r24
 728:	2c 85       	ldd	r18, Y+12	; 0x0c
 72a:	50 e8       	ldi	r21, 0x80	; 128
 72c:	25 2e       	mov	r2, r21
 72e:	22 2a       	or	r2, r18
 730:	83 01       	movw	r16, r6
 732:	23 fc       	sbrc	r2, 3
 734:	1a c0       	rjmp	.+52     	; 0x76a <vfprintf+0x1ae>
 736:	05 c0       	rjmp	.+10     	; 0x742 <vfprintf+0x186>
 738:	b7 01       	movw	r22, r14
 73a:	80 e2       	ldi	r24, 0x20	; 32
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	21 d1       	rcall	.+578    	; 0x982 <fputc>
 740:	3a 94       	dec	r3
 742:	83 2d       	mov	r24, r3
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	48 16       	cp	r4, r24
 748:	59 06       	cpc	r5, r25
 74a:	b0 f3       	brcs	.-20     	; 0x738 <vfprintf+0x17c>
 74c:	0e c0       	rjmp	.+28     	; 0x76a <vfprintf+0x1ae>
 74e:	f5 01       	movw	r30, r10
 750:	27 fc       	sbrc	r2, 7
 752:	85 91       	lpm	r24, Z+
 754:	27 fe       	sbrs	r2, 7
 756:	81 91       	ld	r24, Z+
 758:	5f 01       	movw	r10, r30
 75a:	b7 01       	movw	r22, r14
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	11 d1       	rcall	.+546    	; 0x982 <fputc>
 760:	31 10       	cpse	r3, r1
 762:	3a 94       	dec	r3
 764:	f1 e0       	ldi	r31, 0x01	; 1
 766:	4f 1a       	sub	r4, r31
 768:	51 08       	sbc	r5, r1
 76a:	41 14       	cp	r4, r1
 76c:	51 04       	cpc	r5, r1
 76e:	79 f7       	brne	.-34     	; 0x74e <vfprintf+0x192>
 770:	e5 c0       	rjmp	.+458    	; 0x93c <vfprintf+0x380>
 772:	84 36       	cpi	r24, 0x64	; 100
 774:	11 f0       	breq	.+4      	; 0x77a <vfprintf+0x1be>
 776:	89 36       	cpi	r24, 0x69	; 105
 778:	39 f5       	brne	.+78     	; 0x7c8 <vfprintf+0x20c>
 77a:	f8 01       	movw	r30, r16
 77c:	27 ff       	sbrs	r18, 7
 77e:	07 c0       	rjmp	.+14     	; 0x78e <vfprintf+0x1d2>
 780:	60 81       	ld	r22, Z
 782:	71 81       	ldd	r23, Z+1	; 0x01
 784:	82 81       	ldd	r24, Z+2	; 0x02
 786:	93 81       	ldd	r25, Z+3	; 0x03
 788:	0c 5f       	subi	r16, 0xFC	; 252
 78a:	1f 4f       	sbci	r17, 0xFF	; 255
 78c:	08 c0       	rjmp	.+16     	; 0x79e <vfprintf+0x1e2>
 78e:	60 81       	ld	r22, Z
 790:	71 81       	ldd	r23, Z+1	; 0x01
 792:	88 27       	eor	r24, r24
 794:	77 fd       	sbrc	r23, 7
 796:	80 95       	com	r24
 798:	98 2f       	mov	r25, r24
 79a:	0e 5f       	subi	r16, 0xFE	; 254
 79c:	1f 4f       	sbci	r17, 0xFF	; 255
 79e:	4f e6       	ldi	r20, 0x6F	; 111
 7a0:	b4 2e       	mov	r11, r20
 7a2:	b2 22       	and	r11, r18
 7a4:	97 ff       	sbrs	r25, 7
 7a6:	09 c0       	rjmp	.+18     	; 0x7ba <vfprintf+0x1fe>
 7a8:	90 95       	com	r25
 7aa:	80 95       	com	r24
 7ac:	70 95       	com	r23
 7ae:	61 95       	neg	r22
 7b0:	7f 4f       	sbci	r23, 0xFF	; 255
 7b2:	8f 4f       	sbci	r24, 0xFF	; 255
 7b4:	9f 4f       	sbci	r25, 0xFF	; 255
 7b6:	f0 e8       	ldi	r31, 0x80	; 128
 7b8:	bf 2a       	or	r11, r31
 7ba:	2a e0       	ldi	r18, 0x0A	; 10
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	a4 01       	movw	r20, r8
 7c0:	0c d1       	rcall	.+536    	; 0x9da <__ultoa_invert>
 7c2:	a8 2e       	mov	r10, r24
 7c4:	a8 18       	sub	r10, r8
 7c6:	42 c0       	rjmp	.+132    	; 0x84c <vfprintf+0x290>
 7c8:	85 37       	cpi	r24, 0x75	; 117
 7ca:	31 f4       	brne	.+12     	; 0x7d8 <vfprintf+0x21c>
 7cc:	3f ee       	ldi	r19, 0xEF	; 239
 7ce:	b3 2e       	mov	r11, r19
 7d0:	b2 22       	and	r11, r18
 7d2:	2a e0       	ldi	r18, 0x0A	; 10
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	24 c0       	rjmp	.+72     	; 0x820 <vfprintf+0x264>
 7d8:	99 ef       	ldi	r25, 0xF9	; 249
 7da:	b9 2e       	mov	r11, r25
 7dc:	b2 22       	and	r11, r18
 7de:	8f 36       	cpi	r24, 0x6F	; 111
 7e0:	b9 f0       	breq	.+46     	; 0x810 <vfprintf+0x254>
 7e2:	20 f4       	brcc	.+8      	; 0x7ec <vfprintf+0x230>
 7e4:	88 35       	cpi	r24, 0x58	; 88
 7e6:	09 f0       	breq	.+2      	; 0x7ea <vfprintf+0x22e>
 7e8:	ac c0       	rjmp	.+344    	; 0x942 <vfprintf+0x386>
 7ea:	0d c0       	rjmp	.+26     	; 0x806 <vfprintf+0x24a>
 7ec:	80 37       	cpi	r24, 0x70	; 112
 7ee:	21 f0       	breq	.+8      	; 0x7f8 <vfprintf+0x23c>
 7f0:	88 37       	cpi	r24, 0x78	; 120
 7f2:	09 f0       	breq	.+2      	; 0x7f6 <vfprintf+0x23a>
 7f4:	a6 c0       	rjmp	.+332    	; 0x942 <vfprintf+0x386>
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <vfprintf+0x240>
 7f8:	20 e1       	ldi	r18, 0x10	; 16
 7fa:	b2 2a       	or	r11, r18
 7fc:	b4 fe       	sbrs	r11, 4
 7fe:	0b c0       	rjmp	.+22     	; 0x816 <vfprintf+0x25a>
 800:	84 e0       	ldi	r24, 0x04	; 4
 802:	b8 2a       	or	r11, r24
 804:	08 c0       	rjmp	.+16     	; 0x816 <vfprintf+0x25a>
 806:	24 ff       	sbrs	r18, 4
 808:	09 c0       	rjmp	.+18     	; 0x81c <vfprintf+0x260>
 80a:	e6 e0       	ldi	r30, 0x06	; 6
 80c:	be 2a       	or	r11, r30
 80e:	06 c0       	rjmp	.+12     	; 0x81c <vfprintf+0x260>
 810:	28 e0       	ldi	r18, 0x08	; 8
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	05 c0       	rjmp	.+10     	; 0x820 <vfprintf+0x264>
 816:	20 e1       	ldi	r18, 0x10	; 16
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	02 c0       	rjmp	.+4      	; 0x820 <vfprintf+0x264>
 81c:	20 e1       	ldi	r18, 0x10	; 16
 81e:	32 e0       	ldi	r19, 0x02	; 2
 820:	f8 01       	movw	r30, r16
 822:	b7 fe       	sbrs	r11, 7
 824:	07 c0       	rjmp	.+14     	; 0x834 <vfprintf+0x278>
 826:	60 81       	ld	r22, Z
 828:	71 81       	ldd	r23, Z+1	; 0x01
 82a:	82 81       	ldd	r24, Z+2	; 0x02
 82c:	93 81       	ldd	r25, Z+3	; 0x03
 82e:	0c 5f       	subi	r16, 0xFC	; 252
 830:	1f 4f       	sbci	r17, 0xFF	; 255
 832:	06 c0       	rjmp	.+12     	; 0x840 <vfprintf+0x284>
 834:	60 81       	ld	r22, Z
 836:	71 81       	ldd	r23, Z+1	; 0x01
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 5f       	subi	r16, 0xFE	; 254
 83e:	1f 4f       	sbci	r17, 0xFF	; 255
 840:	a4 01       	movw	r20, r8
 842:	cb d0       	rcall	.+406    	; 0x9da <__ultoa_invert>
 844:	a8 2e       	mov	r10, r24
 846:	a8 18       	sub	r10, r8
 848:	ff e7       	ldi	r31, 0x7F	; 127
 84a:	bf 22       	and	r11, r31
 84c:	b6 fe       	sbrs	r11, 6
 84e:	0b c0       	rjmp	.+22     	; 0x866 <vfprintf+0x2aa>
 850:	2b 2d       	mov	r18, r11
 852:	2e 7f       	andi	r18, 0xFE	; 254
 854:	a5 14       	cp	r10, r5
 856:	50 f4       	brcc	.+20     	; 0x86c <vfprintf+0x2b0>
 858:	b4 fe       	sbrs	r11, 4
 85a:	0a c0       	rjmp	.+20     	; 0x870 <vfprintf+0x2b4>
 85c:	b2 fc       	sbrc	r11, 2
 85e:	08 c0       	rjmp	.+16     	; 0x870 <vfprintf+0x2b4>
 860:	2b 2d       	mov	r18, r11
 862:	2e 7e       	andi	r18, 0xEE	; 238
 864:	05 c0       	rjmp	.+10     	; 0x870 <vfprintf+0x2b4>
 866:	7a 2c       	mov	r7, r10
 868:	2b 2d       	mov	r18, r11
 86a:	03 c0       	rjmp	.+6      	; 0x872 <vfprintf+0x2b6>
 86c:	7a 2c       	mov	r7, r10
 86e:	01 c0       	rjmp	.+2      	; 0x872 <vfprintf+0x2b6>
 870:	75 2c       	mov	r7, r5
 872:	24 ff       	sbrs	r18, 4
 874:	0d c0       	rjmp	.+26     	; 0x890 <vfprintf+0x2d4>
 876:	fe 01       	movw	r30, r28
 878:	ea 0d       	add	r30, r10
 87a:	f1 1d       	adc	r31, r1
 87c:	80 81       	ld	r24, Z
 87e:	80 33       	cpi	r24, 0x30	; 48
 880:	11 f4       	brne	.+4      	; 0x886 <vfprintf+0x2ca>
 882:	29 7e       	andi	r18, 0xE9	; 233
 884:	09 c0       	rjmp	.+18     	; 0x898 <vfprintf+0x2dc>
 886:	22 ff       	sbrs	r18, 2
 888:	06 c0       	rjmp	.+12     	; 0x896 <vfprintf+0x2da>
 88a:	73 94       	inc	r7
 88c:	73 94       	inc	r7
 88e:	04 c0       	rjmp	.+8      	; 0x898 <vfprintf+0x2dc>
 890:	82 2f       	mov	r24, r18
 892:	86 78       	andi	r24, 0x86	; 134
 894:	09 f0       	breq	.+2      	; 0x898 <vfprintf+0x2dc>
 896:	73 94       	inc	r7
 898:	23 fd       	sbrc	r18, 3
 89a:	13 c0       	rjmp	.+38     	; 0x8c2 <vfprintf+0x306>
 89c:	20 ff       	sbrs	r18, 0
 89e:	0e c0       	rjmp	.+28     	; 0x8bc <vfprintf+0x300>
 8a0:	5a 2c       	mov	r5, r10
 8a2:	73 14       	cp	r7, r3
 8a4:	58 f4       	brcc	.+22     	; 0x8bc <vfprintf+0x300>
 8a6:	53 0c       	add	r5, r3
 8a8:	57 18       	sub	r5, r7
 8aa:	73 2c       	mov	r7, r3
 8ac:	07 c0       	rjmp	.+14     	; 0x8bc <vfprintf+0x300>
 8ae:	b7 01       	movw	r22, r14
 8b0:	80 e2       	ldi	r24, 0x20	; 32
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	2c 87       	std	Y+12, r18	; 0x0c
 8b6:	65 d0       	rcall	.+202    	; 0x982 <fputc>
 8b8:	73 94       	inc	r7
 8ba:	2c 85       	ldd	r18, Y+12	; 0x0c
 8bc:	73 14       	cp	r7, r3
 8be:	b8 f3       	brcs	.-18     	; 0x8ae <vfprintf+0x2f2>
 8c0:	04 c0       	rjmp	.+8      	; 0x8ca <vfprintf+0x30e>
 8c2:	73 14       	cp	r7, r3
 8c4:	10 f4       	brcc	.+4      	; 0x8ca <vfprintf+0x30e>
 8c6:	37 18       	sub	r3, r7
 8c8:	01 c0       	rjmp	.+2      	; 0x8cc <vfprintf+0x310>
 8ca:	31 2c       	mov	r3, r1
 8cc:	24 ff       	sbrs	r18, 4
 8ce:	11 c0       	rjmp	.+34     	; 0x8f2 <vfprintf+0x336>
 8d0:	b7 01       	movw	r22, r14
 8d2:	80 e3       	ldi	r24, 0x30	; 48
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	2c 87       	std	Y+12, r18	; 0x0c
 8d8:	54 d0       	rcall	.+168    	; 0x982 <fputc>
 8da:	2c 85       	ldd	r18, Y+12	; 0x0c
 8dc:	22 ff       	sbrs	r18, 2
 8de:	1c c0       	rjmp	.+56     	; 0x918 <vfprintf+0x35c>
 8e0:	21 ff       	sbrs	r18, 1
 8e2:	03 c0       	rjmp	.+6      	; 0x8ea <vfprintf+0x32e>
 8e4:	88 e5       	ldi	r24, 0x58	; 88
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <vfprintf+0x332>
 8ea:	88 e7       	ldi	r24, 0x78	; 120
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	b7 01       	movw	r22, r14
 8f0:	0c c0       	rjmp	.+24     	; 0x90a <vfprintf+0x34e>
 8f2:	82 2f       	mov	r24, r18
 8f4:	86 78       	andi	r24, 0x86	; 134
 8f6:	81 f0       	breq	.+32     	; 0x918 <vfprintf+0x35c>
 8f8:	21 fd       	sbrc	r18, 1
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <vfprintf+0x344>
 8fc:	80 e2       	ldi	r24, 0x20	; 32
 8fe:	01 c0       	rjmp	.+2      	; 0x902 <vfprintf+0x346>
 900:	8b e2       	ldi	r24, 0x2B	; 43
 902:	27 fd       	sbrc	r18, 7
 904:	8d e2       	ldi	r24, 0x2D	; 45
 906:	b7 01       	movw	r22, r14
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	3b d0       	rcall	.+118    	; 0x982 <fputc>
 90c:	05 c0       	rjmp	.+10     	; 0x918 <vfprintf+0x35c>
 90e:	b7 01       	movw	r22, r14
 910:	80 e3       	ldi	r24, 0x30	; 48
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	36 d0       	rcall	.+108    	; 0x982 <fputc>
 916:	5a 94       	dec	r5
 918:	a5 14       	cp	r10, r5
 91a:	c8 f3       	brcs	.-14     	; 0x90e <vfprintf+0x352>
 91c:	aa 94       	dec	r10
 91e:	f4 01       	movw	r30, r8
 920:	ea 0d       	add	r30, r10
 922:	f1 1d       	adc	r31, r1
 924:	b7 01       	movw	r22, r14
 926:	80 81       	ld	r24, Z
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	2b d0       	rcall	.+86     	; 0x982 <fputc>
 92c:	a1 10       	cpse	r10, r1
 92e:	f6 cf       	rjmp	.-20     	; 0x91c <vfprintf+0x360>
 930:	05 c0       	rjmp	.+10     	; 0x93c <vfprintf+0x380>
 932:	b7 01       	movw	r22, r14
 934:	80 e2       	ldi	r24, 0x20	; 32
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	24 d0       	rcall	.+72     	; 0x982 <fputc>
 93a:	3a 94       	dec	r3
 93c:	31 10       	cpse	r3, r1
 93e:	f9 cf       	rjmp	.-14     	; 0x932 <vfprintf+0x376>
 940:	50 ce       	rjmp	.-864    	; 0x5e2 <vfprintf+0x26>
 942:	f7 01       	movw	r30, r14
 944:	26 81       	ldd	r18, Z+6	; 0x06
 946:	37 81       	ldd	r19, Z+7	; 0x07
 948:	02 c0       	rjmp	.+4      	; 0x94e <vfprintf+0x392>
 94a:	2f ef       	ldi	r18, 0xFF	; 255
 94c:	3f ef       	ldi	r19, 0xFF	; 255
 94e:	c9 01       	movw	r24, r18
 950:	2c 96       	adiw	r28, 0x0c	; 12
 952:	e2 e1       	ldi	r30, 0x12	; 18
 954:	bc c0       	rjmp	.+376    	; 0xace <__epilogue_restores__>

00000956 <strnlen_P>:
 956:	fc 01       	movw	r30, r24
 958:	05 90       	lpm	r0, Z+
 95a:	61 50       	subi	r22, 0x01	; 1
 95c:	70 40       	sbci	r23, 0x00	; 0
 95e:	01 10       	cpse	r0, r1
 960:	d8 f7       	brcc	.-10     	; 0x958 <strnlen_P+0x2>
 962:	80 95       	com	r24
 964:	90 95       	com	r25
 966:	8e 0f       	add	r24, r30
 968:	9f 1f       	adc	r25, r31
 96a:	08 95       	ret

0000096c <strnlen>:
 96c:	fc 01       	movw	r30, r24
 96e:	61 50       	subi	r22, 0x01	; 1
 970:	70 40       	sbci	r23, 0x00	; 0
 972:	01 90       	ld	r0, Z+
 974:	01 10       	cpse	r0, r1
 976:	d8 f7       	brcc	.-10     	; 0x96e <strnlen+0x2>
 978:	80 95       	com	r24
 97a:	90 95       	com	r25
 97c:	8e 0f       	add	r24, r30
 97e:	9f 1f       	adc	r25, r31
 980:	08 95       	ret

00000982 <fputc>:
 982:	0f 93       	push	r16
 984:	1f 93       	push	r17
 986:	cf 93       	push	r28
 988:	df 93       	push	r29
 98a:	8c 01       	movw	r16, r24
 98c:	eb 01       	movw	r28, r22
 98e:	8b 81       	ldd	r24, Y+3	; 0x03
 990:	81 fd       	sbrc	r24, 1
 992:	03 c0       	rjmp	.+6      	; 0x99a <fputc+0x18>
 994:	0f ef       	ldi	r16, 0xFF	; 255
 996:	1f ef       	ldi	r17, 0xFF	; 255
 998:	1a c0       	rjmp	.+52     	; 0x9ce <fputc+0x4c>
 99a:	82 ff       	sbrs	r24, 2
 99c:	0d c0       	rjmp	.+26     	; 0x9b8 <fputc+0x36>
 99e:	2e 81       	ldd	r18, Y+6	; 0x06
 9a0:	3f 81       	ldd	r19, Y+7	; 0x07
 9a2:	8c 81       	ldd	r24, Y+4	; 0x04
 9a4:	9d 81       	ldd	r25, Y+5	; 0x05
 9a6:	28 17       	cp	r18, r24
 9a8:	39 07       	cpc	r19, r25
 9aa:	64 f4       	brge	.+24     	; 0x9c4 <fputc+0x42>
 9ac:	e8 81       	ld	r30, Y
 9ae:	f9 81       	ldd	r31, Y+1	; 0x01
 9b0:	01 93       	st	Z+, r16
 9b2:	f9 83       	std	Y+1, r31	; 0x01
 9b4:	e8 83       	st	Y, r30
 9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <fputc+0x42>
 9b8:	e8 85       	ldd	r30, Y+8	; 0x08
 9ba:	f9 85       	ldd	r31, Y+9	; 0x09
 9bc:	80 2f       	mov	r24, r16
 9be:	09 95       	icall
 9c0:	89 2b       	or	r24, r25
 9c2:	41 f7       	brne	.-48     	; 0x994 <fputc+0x12>
 9c4:	8e 81       	ldd	r24, Y+6	; 0x06
 9c6:	9f 81       	ldd	r25, Y+7	; 0x07
 9c8:	01 96       	adiw	r24, 0x01	; 1
 9ca:	9f 83       	std	Y+7, r25	; 0x07
 9cc:	8e 83       	std	Y+6, r24	; 0x06
 9ce:	c8 01       	movw	r24, r16
 9d0:	df 91       	pop	r29
 9d2:	cf 91       	pop	r28
 9d4:	1f 91       	pop	r17
 9d6:	0f 91       	pop	r16
 9d8:	08 95       	ret

000009da <__ultoa_invert>:
 9da:	fa 01       	movw	r30, r20
 9dc:	aa 27       	eor	r26, r26
 9de:	28 30       	cpi	r18, 0x08	; 8
 9e0:	51 f1       	breq	.+84     	; 0xa36 <__ultoa_invert+0x5c>
 9e2:	20 31       	cpi	r18, 0x10	; 16
 9e4:	81 f1       	breq	.+96     	; 0xa46 <__ultoa_invert+0x6c>
 9e6:	e8 94       	clt
 9e8:	6f 93       	push	r22
 9ea:	6e 7f       	andi	r22, 0xFE	; 254
 9ec:	6e 5f       	subi	r22, 0xFE	; 254
 9ee:	7f 4f       	sbci	r23, 0xFF	; 255
 9f0:	8f 4f       	sbci	r24, 0xFF	; 255
 9f2:	9f 4f       	sbci	r25, 0xFF	; 255
 9f4:	af 4f       	sbci	r26, 0xFF	; 255
 9f6:	b1 e0       	ldi	r27, 0x01	; 1
 9f8:	3e d0       	rcall	.+124    	; 0xa76 <__ultoa_invert+0x9c>
 9fa:	b4 e0       	ldi	r27, 0x04	; 4
 9fc:	3c d0       	rcall	.+120    	; 0xa76 <__ultoa_invert+0x9c>
 9fe:	67 0f       	add	r22, r23
 a00:	78 1f       	adc	r23, r24
 a02:	89 1f       	adc	r24, r25
 a04:	9a 1f       	adc	r25, r26
 a06:	a1 1d       	adc	r26, r1
 a08:	68 0f       	add	r22, r24
 a0a:	79 1f       	adc	r23, r25
 a0c:	8a 1f       	adc	r24, r26
 a0e:	91 1d       	adc	r25, r1
 a10:	a1 1d       	adc	r26, r1
 a12:	6a 0f       	add	r22, r26
 a14:	71 1d       	adc	r23, r1
 a16:	81 1d       	adc	r24, r1
 a18:	91 1d       	adc	r25, r1
 a1a:	a1 1d       	adc	r26, r1
 a1c:	20 d0       	rcall	.+64     	; 0xa5e <__ultoa_invert+0x84>
 a1e:	09 f4       	brne	.+2      	; 0xa22 <__ultoa_invert+0x48>
 a20:	68 94       	set
 a22:	3f 91       	pop	r19
 a24:	2a e0       	ldi	r18, 0x0A	; 10
 a26:	26 9f       	mul	r18, r22
 a28:	11 24       	eor	r1, r1
 a2a:	30 19       	sub	r19, r0
 a2c:	30 5d       	subi	r19, 0xD0	; 208
 a2e:	31 93       	st	Z+, r19
 a30:	de f6       	brtc	.-74     	; 0x9e8 <__ultoa_invert+0xe>
 a32:	cf 01       	movw	r24, r30
 a34:	08 95       	ret
 a36:	46 2f       	mov	r20, r22
 a38:	47 70       	andi	r20, 0x07	; 7
 a3a:	40 5d       	subi	r20, 0xD0	; 208
 a3c:	41 93       	st	Z+, r20
 a3e:	b3 e0       	ldi	r27, 0x03	; 3
 a40:	0f d0       	rcall	.+30     	; 0xa60 <__ultoa_invert+0x86>
 a42:	c9 f7       	brne	.-14     	; 0xa36 <__ultoa_invert+0x5c>
 a44:	f6 cf       	rjmp	.-20     	; 0xa32 <__ultoa_invert+0x58>
 a46:	46 2f       	mov	r20, r22
 a48:	4f 70       	andi	r20, 0x0F	; 15
 a4a:	40 5d       	subi	r20, 0xD0	; 208
 a4c:	4a 33       	cpi	r20, 0x3A	; 58
 a4e:	18 f0       	brcs	.+6      	; 0xa56 <__ultoa_invert+0x7c>
 a50:	49 5d       	subi	r20, 0xD9	; 217
 a52:	31 fd       	sbrc	r19, 1
 a54:	40 52       	subi	r20, 0x20	; 32
 a56:	41 93       	st	Z+, r20
 a58:	02 d0       	rcall	.+4      	; 0xa5e <__ultoa_invert+0x84>
 a5a:	a9 f7       	brne	.-22     	; 0xa46 <__ultoa_invert+0x6c>
 a5c:	ea cf       	rjmp	.-44     	; 0xa32 <__ultoa_invert+0x58>
 a5e:	b4 e0       	ldi	r27, 0x04	; 4
 a60:	a6 95       	lsr	r26
 a62:	97 95       	ror	r25
 a64:	87 95       	ror	r24
 a66:	77 95       	ror	r23
 a68:	67 95       	ror	r22
 a6a:	ba 95       	dec	r27
 a6c:	c9 f7       	brne	.-14     	; 0xa60 <__ultoa_invert+0x86>
 a6e:	00 97       	sbiw	r24, 0x00	; 0
 a70:	61 05       	cpc	r22, r1
 a72:	71 05       	cpc	r23, r1
 a74:	08 95       	ret
 a76:	9b 01       	movw	r18, r22
 a78:	ac 01       	movw	r20, r24
 a7a:	0a 2e       	mov	r0, r26
 a7c:	06 94       	lsr	r0
 a7e:	57 95       	ror	r21
 a80:	47 95       	ror	r20
 a82:	37 95       	ror	r19
 a84:	27 95       	ror	r18
 a86:	ba 95       	dec	r27
 a88:	c9 f7       	brne	.-14     	; 0xa7c <__ultoa_invert+0xa2>
 a8a:	62 0f       	add	r22, r18
 a8c:	73 1f       	adc	r23, r19
 a8e:	84 1f       	adc	r24, r20
 a90:	95 1f       	adc	r25, r21
 a92:	a0 1d       	adc	r26, r0
 a94:	08 95       	ret

00000a96 <__prologue_saves__>:
 a96:	2f 92       	push	r2
 a98:	3f 92       	push	r3
 a9a:	4f 92       	push	r4
 a9c:	5f 92       	push	r5
 a9e:	6f 92       	push	r6
 aa0:	7f 92       	push	r7
 aa2:	8f 92       	push	r8
 aa4:	9f 92       	push	r9
 aa6:	af 92       	push	r10
 aa8:	bf 92       	push	r11
 aaa:	cf 92       	push	r12
 aac:	df 92       	push	r13
 aae:	ef 92       	push	r14
 ab0:	ff 92       	push	r15
 ab2:	0f 93       	push	r16
 ab4:	1f 93       	push	r17
 ab6:	cf 93       	push	r28
 ab8:	df 93       	push	r29
 aba:	cd b7       	in	r28, 0x3d	; 61
 abc:	de b7       	in	r29, 0x3e	; 62
 abe:	ca 1b       	sub	r28, r26
 ac0:	db 0b       	sbc	r29, r27
 ac2:	0f b6       	in	r0, 0x3f	; 63
 ac4:	f8 94       	cli
 ac6:	de bf       	out	0x3e, r29	; 62
 ac8:	0f be       	out	0x3f, r0	; 63
 aca:	cd bf       	out	0x3d, r28	; 61
 acc:	09 94       	ijmp

00000ace <__epilogue_restores__>:
 ace:	2a 88       	ldd	r2, Y+18	; 0x12
 ad0:	39 88       	ldd	r3, Y+17	; 0x11
 ad2:	48 88       	ldd	r4, Y+16	; 0x10
 ad4:	5f 84       	ldd	r5, Y+15	; 0x0f
 ad6:	6e 84       	ldd	r6, Y+14	; 0x0e
 ad8:	7d 84       	ldd	r7, Y+13	; 0x0d
 ada:	8c 84       	ldd	r8, Y+12	; 0x0c
 adc:	9b 84       	ldd	r9, Y+11	; 0x0b
 ade:	aa 84       	ldd	r10, Y+10	; 0x0a
 ae0:	b9 84       	ldd	r11, Y+9	; 0x09
 ae2:	c8 84       	ldd	r12, Y+8	; 0x08
 ae4:	df 80       	ldd	r13, Y+7	; 0x07
 ae6:	ee 80       	ldd	r14, Y+6	; 0x06
 ae8:	fd 80       	ldd	r15, Y+5	; 0x05
 aea:	0c 81       	ldd	r16, Y+4	; 0x04
 aec:	1b 81       	ldd	r17, Y+3	; 0x03
 aee:	aa 81       	ldd	r26, Y+2	; 0x02
 af0:	b9 81       	ldd	r27, Y+1	; 0x01
 af2:	ce 0f       	add	r28, r30
 af4:	d1 1d       	adc	r29, r1
 af6:	0f b6       	in	r0, 0x3f	; 63
 af8:	f8 94       	cli
 afa:	de bf       	out	0x3e, r29	; 62
 afc:	0f be       	out	0x3f, r0	; 63
 afe:	cd bf       	out	0x3d, r28	; 61
 b00:	ed 01       	movw	r28, r26
 b02:	08 95       	ret

00000b04 <_exit>:
 b04:	f8 94       	cli

00000b06 <__stop_program>:
 b06:	ff cf       	rjmp	.-2      	; 0xb06 <__stop_program>
